{"version":3,"sources":["components/Header.tsx","components/breadcrumb/BreadCrumb.tsx","components/dashboard/Sidebar.tsx","components/dashboard/DocumentTable.tsx","components/dashboard/DocumentDashboard.tsx","logo.svg","components/HomeContainer.tsx","components/Routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","selectedEntry","setSelectedEntry","useState","currentEntry","setCurrentEntry","handleMenuClick","e","key","useEffect","className","data-testid","theme","mode","onClick","selectedKeys","Item","to","BreadCrumb","location","useLocation","handleLinkClick","target","innerText","toLowerCase","pathnames","pathname","split","filter","item","capitalize","s","charAt","toUpperCase","slice","style","margin","length","map","name","index","routeTo","join","renderBreadCrumb","RangePicker","DatePicker","rootSubmenuKeys","checkboxKeys","dateFormat","Sidebar","dateFilter","addressFilter","statusFilter","groupFilter","handleAddressFilter","handleDateFilter","handleDateRangeFilter","handleStatusFilter","handleGroupFilter","openKeys","setOpenKeys","Sider","width","title","defaultSelectedKeys","defaultOpenKeys","height","borderRight","toString","onOpenChange","keys","latestOpenKey","find","indexOf","value","placeholder","onChange","moment","format","m","toLocaleString","Group","options","defaultValue","Option","values","formatString","documents","group","type","status","address","date","Date","channel","content","action","DocumentTable","dateRangeFilter","resetFilters","Form","useForm","form","selectedColumn","setSelectedColumn","selectedRowKeys","setSelectedRowKeys","documentList","setDocumentList","filteredDocuments","setFilteredDocuments","total","showTotal","range","defaultPageSize","defaultCurrent","showSizeChanger","tablePagination","setTablePagination","sortFunction","a","b","columns","dataIndex","sorter","render","rowSelection","selections","Table","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","newList","doc","includes","some","sf","unix","Content","layout","label","newData","getFieldValue","resetFields","marginBottom","expandable","expandedRowRender","record","showHeader","dataSource","span","offset","handleResetColumnChange","pagination","DocumentDashboard","setDateFilter","setAddressFilter","setStatusFilter","setGroupFilter","setDateRangeFilter","checkboxGroupStatus","setCheckBoxGroupStatus","states","forEach","cs","push","column","HomeContainer","src","logo","alt","href","rel","Routes","exact","path","props","Component","App","history","state","selectedMenuEntry","window","pop","setSelectedMenuEntry","setState","createBrowserHistory","this","padding","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7fe6898.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport { Layout, Menu } from 'antd';\nimport { FC, useEffect, useState } from 'react';\nimport { Props } from './breadcrumb/BreadCrumb';\n\n/**\n * @name Header Function Component extends {@link FC}\n * @summary Function component that will display a navbar header\n *\n * @param props {@link Props} to include. All mandatory.\n *\n * @returns Fragment {@link React.Fragment} containing the composition of elements to display the {@link Menu}\n */\nexport const Header: FC<Props> = ({ selectedEntry, setSelectedEntry }) => {\n  const [currentEntry, setCurrentEntry] = useState<string>('');\n\n  /**\n   * Handler to set current entry\n   * @param e event\n   */\n  const handleMenuClick = (e: any) => {\n    setCurrentEntry(e.key);\n  }\n\n  // Effect for current entry\n  useEffect(() => {\n    setCurrentEntry(selectedEntry);\n  }, [selectedEntry]);\n\n  /**\n   * @name renderNavbar\n   * @summary Helper function to render the navbar component\n   * @returns Fragment {@link React.Fragment} containing the elements of the navbar\n   */\n  const renderNavbar = () => {\n    return (\n      <>\n        <Layout className=\"header\">\n          <Menu data-testid=\"header-component\" theme=\"dark\" mode=\"horizontal\" onClick={handleMenuClick} selectedKeys={[currentEntry]}>\n            <Menu.Item key=\"home\">\n              <Link to=\"/\">\n                <p>Home</p>\n              </Link>\n            </Menu.Item>\n            <Menu.Item key=\"documents\">\n              <Link to=\"/documents\">\n                <p>Documents</p>\n              </Link>\n            </Menu.Item>\n          </Menu>\n        </Layout>\n      </>\n    );\n  };\n\n  return (\n    <>\n      {renderNavbar()}\n    </>\n  );\n};\n","import { useLocation, Link } from \"react-router-dom\";\nimport { Breadcrumb } from \"antd\";\nimport { FC } from 'react';\n\n/**\n * @name Props for BreadCrumb component\n *\n * @param selectedEntry value of the current menu entry\n * @function setSelectedEntry setter function for current menu entry\n */\nexport interface Props {\n  selectedEntry: string;\n  setSelectedEntry: (value: string) => void;\n}\n\n/**\n * @name BreadCrumb Function Component extends {@link FC}\n * @summary Function component that will display a sider with a menu list containing filters to apply on the {@link DocumentTable} component.\n *\n * @param props {@link Props} to include. All mandatory.\n *\n * @returns Fragment {@link React.Fragment} containing the composition of elements to display the {@link Layout.Sider} with the filters.\n */\nexport const BreadCrumb: FC<Props> = ({ selectedEntry, setSelectedEntry }) => {\n  const location = useLocation();\n\n  /**\n   * handleLinkClick - helper function to set current menu entry on click.\n   *\n   * @param e event\n   */\n  const handleLinkClick = (e: any) => {\n    setSelectedEntry(e.target.innerText.toLowerCase());\n  };\n\n  /**\n   * @name renderBreadCrumb\n   * @summary Helper function to render BreadCrumb component\n   * @returns Fragment {@link React.Fragment} containing the current path breadcrumb\n   */\n  const renderBreadCrumb = () => {\n    const { pathname } = location;\n    const pathnames = pathname.split(\"/\").filter((item: string) => item);\n    const capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);\n\n    return (\n      <>\n        <Breadcrumb data-testid='breadcrumb-component' style={{ margin: '16px 0' }}>\n          {pathnames.length > 0 ?\n            <Breadcrumb.Item key=\"/\"><Link to=\"/\" onClick={handleLinkClick} >Home</Link></Breadcrumb.Item>\n            : <Breadcrumb.Item key=\"home\" >Home</Breadcrumb.Item>}\n\n          {pathnames.map((name: string, index: number) => {\n            const routeTo = `/${pathnames.slice(0, index + 1).join(\"/\")}`;\n            const isLast = index === pathnames.length - 1;\n            return isLast ? <Breadcrumb.Item key={name}>{capitalize(name)}</Breadcrumb.Item>\n              : <Breadcrumb.Item key={name}><Link to={`${routeTo}`} onClick={handleLinkClick} >{capitalize(name)}</Link></Breadcrumb.Item>;\n          })}\n        </Breadcrumb>\n      </>\n    );\n  };\n\n  return <>{renderBreadCrumb()}</>;\n};\n","import { Checkbox, Select, DatePicker, Layout, Menu, PageHeader, Input } from 'antd';\nimport SubMenu from 'antd/lib/menu/SubMenu';\nimport { FC, Key, useState } from 'react';\nimport moment, { Moment } from 'moment';\nimport { RangeValue } from 'rc-picker/lib/interface';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\n\nconst { RangePicker } = DatePicker;\n\n// Static values\nconst rootSubmenuKeys = ['sub1', 'sub2', 'sub3', 'sub4', 'sub5'];\nconst checkboxKeys = ['Received', 'Printed', 'Folded', 'Sorted', 'Delivered'];\nconst dateFormat = 'DD/MM/YYYY';\n\n/**\n * @name Props for Sidebar filtering component\n * @summary Holds the props definition for the table filters.\n *\n * @param dateFilter holds state for the date-picker component filter.\n * @param addressFilter holds state for the address input component filter.\n * @param statusFilter holds the state list of checked statuses on the checkbox group component filter.\n * @param groupFilter holds the state for the select group component filter.\n *\n * @function handleAddressFilter holds the function that will handle the input value for the address component filter.\n * @function handleDateFilter holds the function that will handle the input value for the date-picker component filter.\n * @function handleDateRangeFilter holds the function that will handle the range values for the range-picker component filter.\n * @function handleStatusFilter holds the function that will handle the list of values for the checkbox group component filter.\n * @function handleGroupFilter holds the function that will handle the select group component filter.∫\n */\nexport interface Props {\n    dateFilter: string;\n    addressFilter: string;\n    statusFilter: CheckboxValueType[];\n    groupFilter: string;\n    handleAddressFilter: (value: string) => void;\n    handleDateFilter: (dateString: string) => void;\n    handleDateRangeFilter: (values: RangeValue<Moment>, formatString: [string, string]) => void;\n    handleStatusFilter: (options: CheckboxValueType[]) => void;\n    handleGroupFilter: (group: string) => void;\n}\n\n/**\n * @name Sidebar Function Component extends {@link FC}\n * @summary Function component that will display a sider with a menu list containing filters to apply on the {@link DocumentTable} component.\n *\n * @param props {@link Props} to include. All mandatory.\n *\n * @returns Fragment {@link React.Fragment} containing the composition of elements to display the {@link Layout.Sider} with the filters.\n */\nexport const Sidebar: FC<Props> = ({\n    dateFilter,\n    addressFilter,\n    statusFilter,\n    groupFilter,\n    handleAddressFilter,\n    handleDateFilter,\n    handleDateRangeFilter,\n    handleStatusFilter,\n    handleGroupFilter }) => {\n\n    const [openKeys, setOpenKeys] = useState<Key[]>(['sub1']);\n\n    /**\n     * @name onOpenChange\n     * @summary identifies and sets the currently open meny entry to collapse all non active menu entries.\n     * @param keys Array with active keys, only 1 should be present.\n     */\n    const onOpenChange = (keys: Key[]) => {\n        const latestOpenKey: Key | undefined = keys.find((key: Key) => openKeys.indexOf(key) === -1);\n        if (latestOpenKey && rootSubmenuKeys.indexOf(latestOpenKey.toString()) === -1) {\n            setOpenKeys(keys);\n        } else {\n            setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\n        }\n    };\n\n    /**\n     * @name listFilters\n     * @summary Helper function to render the {@link SubMenu} component structure for the {@link Menu} on the {@link Layout.Sider}\n     * @returns Fragment {@link React.Fragment} containing the menu list and filters for the {@link DocumentTable} component.\n     */\n    const listFilters = () => {\n        return (\n            <>\n                <SubMenu key=\"sub1\" title=\"Address\">\n                    <Menu.Item key=\"1.1\">\n                        <Input data-testid=\"input-address\" value={addressFilter} placeholder=\"Search Address\" onChange={(e: any) => handleAddressFilter(e.target.value)} />\n                    </Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub2\" title=\"Date\" data-testid=\"menu-date-picker\">\n                    <Menu.Item key=\"2.1\">\n                        <DatePicker value={dateFilter === '' ? null : moment(dateFilter, dateFormat)} format={dateFormat} onChange={(m: any) => handleDateFilter(m ? m.format(dateFormat).toLocaleString() : '')} />\n                    </Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub3\" title=\"Status\" data-testid=\"menu-status\">\n                    <Checkbox.Group value={statusFilter} options={checkboxKeys} onChange={handleStatusFilter} />\n                </SubMenu>\n                <SubMenu key=\"sub4\" title=\"Group\" data-testid=\"menu-select-group\">\n                    <Menu.Item key=\"4.1\">\n                        <Select data-testid=\"select-group\" value={groupFilter} defaultValue=\"\" style={{ width: 120 }} onChange={(value: string) => handleGroupFilter(value)}>\n                            <Select.Option value=\"\">None</Select.Option>\n                            <Select.Option value=\"1\">Group 1</Select.Option>\n                            <Select.Option value=\"2\">Group 2</Select.Option>\n                            <Select.Option value=\"3\">Group 3</Select.Option>\n                            <Select.Option value=\"4\">Group 4</Select.Option>\n                            <Select.Option value=\"5\">Group 5</Select.Option>\n                        </Select>\n                    </Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub5\" title=\"Date Range\" data-testid=\"menu-range\">\n                    <Menu.Item key=\"5.1\">\n                        <RangePicker\n                            format={'DD/MM/YYYY'}\n                            onChange={(values: RangeValue<Moment>, formatString: [string, string]) => { handleDateRangeFilter(values, formatString) }}\n                        />\n                    </Menu.Item>\n                </SubMenu>\n            </>\n        );\n    };\n\n    return (\n        <>\n            <Layout.Sider data-testid=\"sidebar\" width={'20%'} className=\"site-layout-background\">\n                <PageHeader\n                    className=\"site-page-header site-layout-background\"\n                    title=\"Filters\"\n                />\n                <Menu\n                    mode=\"inline\"\n                    defaultSelectedKeys={['1']}\n                    defaultOpenKeys={['sub1']}\n                    style={{ height: '100%', borderRight: 0 }}\n                    openKeys={openKeys.map((key: Key) => key.toString())}\n                    onOpenChange={onOpenChange}\n                >\n                    {listFilters()}\n                </Menu>\n            </Layout.Sider>\n        </>\n    )\n};\n","\nimport { FC, Key, useEffect, useState } from \"react\";\nimport { Button, Col, Form, Input, Layout, PageHeader, Row, Select, Table } from 'antd';\nimport moment from 'moment';\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { TablePaginationConfig, TableRowSelection } from \"antd/lib/table/interface\";\n\n/**\n * @name Document specification for the Document objects.\n * @summary Holds the attributes definitions for the Document objects to be displayed on the {@link DocumentDashboard} component.\n *\n * @param key Holds the value for the Document key attribute.\n * @param name Holds the value for the document's name attribute.\n * @param group Holds the value for the document's group attribute.\n * @param type Holds the value for the document's type attribute.\n * @param address Holds the value for the document's address attribute.\n * @param status Holds the value for the document's status attribute.\n * @param date Holds the string representation for the document's date attribute.\n * @param channel Holds the value for the document's channel attribute.\n * @param content Holds the value for the document's content attribute.\n * @function action Holds a function that could be applied to the owner document. Nullable.\n */\ninterface Document {\n    key: string | number;\n    name: string;\n    group: string;\n    type: string;\n    address: string;\n    status: string;\n    date: string;\n    channel: string;\n    content: string;\n    action: (() => void) | null;\n}\n\n// Static values\nconst dateFormat = 'DD/MM/YYYY';\nconst documents: Document[] = [\n    { key: 0, name: 'Name Document 1', group: 'Group 1', type: 'type 1', status: 'Printed', address: 'Address 1', date: moment(new Date('01/31/2021'), dateFormat).format(dateFormat).toLocaleString(), channel: 'PDF', content: 'This is the content of the document 1', action: null, },\n    { key: 1, name: 'Name Document 2', group: 'Group 2', type: 'type 2', status: 'Printed', address: 'Address 12', date: moment(new Date('01/01/2021'), dateFormat).format(dateFormat).toLocaleString(), channel: 'SMS', content: 'This is the content of the document 2', action: null, },\n    { key: 2, name: 'Name Document 3', group: 'Group 3', type: 'type 1', status: 'Sorted', address: 'Address 123', date: moment(new Date('09/28/2021'), dateFormat).format(dateFormat).toLocaleString(), channel: 'PDF', content: 'This is the content of the document 3', action: null, },\n    { key: 3, name: 'Name Document 4', group: 'Group 4', type: 'type 3', status: 'Received', address: 'Address 1234', date: moment(new Date('10/11/2021'), dateFormat).format(dateFormat).toLocaleString(), channel: 'SMS', content: 'This is the content of the document 4', action: null, }\n];\n\n/**\n * @name Props for {@link DocumentTable}\n * @summary Holds the props definition for the DocumentTable component\n *\n * @param dateFilter holds state for the date-picker component filter.\n * @param addressFilter holds state for the address input component filter.\n * @param statusFilter holds the state list of checked statuses on the checkbox group component filter.\n * @param groupFilter holds the state for the select group component filter.\n * @param dateRangeFilter holds the satte for the range-picker component filter.\n *\n * @function resetFilters Function to reset the values of a selected filter.\n */\ninterface Props {\n    dateFilter: string;\n    addressFilter: string;\n    statusFilter: CheckboxValueType[];\n    groupFilter: string;\n    dateRangeFilter: string[];\n    resetFilters: (filter: string) => void;\n}\n\n/**\n * @name DocumentTable Function Component extends {@link FC}\n * @summary Function component that will display a {@link Table} and an input form to add {@link Document} elements.\n *\n * @param props {@link Props} to include. All mandatory.\n *\n * @returns Fragment {@link React.Fragment} containing the composition of elements to display the {@link Table} with the array of {@link Document} and the form to add new ones.\n */\nexport const DocumentTable: FC<Props> = ({\n    dateFilter,\n    addressFilter,\n    statusFilter,\n    groupFilter,\n    dateRangeFilter,\n    resetFilters }) => {\n\n    const [form] = Form.useForm();\n    const [selectedColumn, setSelectedColumn] = useState<string>('date');\n    const [selectedRowKeys, setSelectedRowKeys] = useState<Key[]>([]);\n    const [documentList, setDocumentList] = useState(documents);\n    const [filteredDocuments, setFilteredDocuments] = useState(documents);\n    const [tablePagination, setTablePagination] = useState<TablePaginationConfig>({\n        total: documentList.length,\n        showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n        defaultPageSize: 10,\n        defaultCurrent: 1,\n        showSizeChanger: true,\n    });\n\n    /**\n     * Helper function to sort objects\n     *\n     * @param a object to test if greater than b\n     * @param b object to test if lesser than a\n     * @returns -1 if a > b ; 1 if b >= a;\n     */\n    const sortFunction = (a: any, b: any) => 0 - (a > b ? 1 : -1);\n\n    // Columns declaration\n    const columns = [\n        {\n            title: 'Channel',\n            dataIndex: 'channel',\n            sorter: sortFunction,\n        },\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            sorter: sortFunction,\n            render: (name: string) => (<><a>{name}</a></>),\n        },\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            sorter: sortFunction,\n        },\n        {\n            title: 'Address',\n            dataIndex: 'address',\n            sorter: sortFunction,\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            sorter: sortFunction,\n        },\n        {\n            title: 'Group',\n            dataIndex: 'group',\n            sorter: sortFunction,\n            render: (group: string) => (<><a>{group}</a></>),\n        },\n        {\n            title: 'Type',\n            dataIndex: 'type',\n            sorter: sortFunction,\n        },\n    ];\n\n    /**\n     * @name onSelectChange\n     * @summary Helper function to handle the change event on the selection patterns and rows for the {@link Table} component.\n     * @param selectedRowKeys holds the selectedRowKeys values in an array of {@link Key}.\n     */\n    const onSelectChange = (selectedRowKeys: Key[]) => {\n        setSelectedRowKeys(selectedRowKeys);\n    };\n\n    // Row Selection Configuration object\n    const rowSelection: TableRowSelection<Document> = {\n        selectedRowKeys,\n        onChange: onSelectChange,\n        selections: [\n            Table.SELECTION_ALL,\n            Table.SELECTION_INVERT,\n            Table.SELECTION_NONE,\n        ],\n    };\n\n    /**\n     * @name handleResetColumnChange\n     * @summary Helper function to handle the selected column to reset its associated filter.\n     * @param value column name to reset filter.\n     */\n    const handleResetColumnChange = (value: string) => {\n        setSelectedColumn(value);\n    };\n\n    /**\n     * @name handleAdd\n     * @summary Helper function to add static objects with dynamic attributes like the key, the name and the date.\n     * @see {@link Document}\n     */\n    const handleAdd = () => {\n        const newData: Document = {\n            key: documentList.length.toString(),\n            name: form.getFieldValue(\"name\") ? form.getFieldValue(\"name\") : `New Document ${documentList.length + 1}`,\n            group: 'Group 5',\n            type: 'type 3',\n            address: 'Address 1234',\n            status: 'Sorted',\n            date: moment(new Date(), dateFormat).format(dateFormat).toLocaleString(),\n            channel: 'WEB',\n            content: `This is the content of ${documentList.length + 1}`,\n            action: null,\n        };\n        setDocumentList([...documentList, newData]);\n        form.resetFields([\"name\"]);\n    };\n\n    /**\n     * @name tableTitle\n     * @summary Helper function to render the header composition to be included in the main {@link Table} component.\n     * @returns a HTML structured {@link Row} component that contains the {@link Select} component and the reset {@link Button} to clear the filters of the selected column.\n     */\n    const tableTitle = () => {\n        return (\n            <Row>\n                <Col span={3}>Dashboard</Col>\n                <Col span={2} offset={17}>\n                    <Select defaultValue=\"date\" onChange={(value: string) => handleResetColumnChange(value)}>\n                        <Select.Option value=\"date\">Date</Select.Option>\n                        <Select.Option value=\"address\">Address</Select.Option>\n                        <Select.Option value=\"status\">Status</Select.Option>\n                        <Select.Option value=\"group\">Group</Select.Option>\n                    </Select></Col>\n                <Col span={2}><Button onClick={() => resetFilters(selectedColumn)}>Reset</Button></Col>\n            </Row>\n        );\n    }\n\n    /**\n     * Effect to render the updates on filters and apply them to the displayed document list.\n     */\n    useEffect(() => {\n        const newList = documentList\n            .filter((doc: Document) => dateFilter === '' || doc.date === dateFilter)\n            .filter((doc: Document) => addressFilter === '' || doc.address.includes(addressFilter))\n            .filter((doc: Document) => statusFilter.length === 0 || statusFilter.some((sf) => doc.status === sf))\n            .filter((doc: Document) => groupFilter === '' || doc.group.includes(groupFilter))\n            .filter((doc: Document) => {\n                return dateRangeFilter.length === 0 || dateRangeFilter[0] === '' || dateRangeFilter[1] === ''\n                    || (moment(dateRangeFilter[0], dateFormat).unix() <= moment(doc.date, dateFormat).unix() && moment(dateRangeFilter[1], dateFormat).unix() >= moment(doc.date, dateFormat).unix())\n            });\n        setFilteredDocuments(newList);\n        setTablePagination({\n            total: filteredDocuments.length,\n            showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n            defaultPageSize: 10,\n            defaultCurrent: 1,\n            showSizeChanger: true,\n        });\n    }, [documentList, addressFilter, dateFilter, statusFilter, groupFilter, dateRangeFilter, filteredDocuments.length]);\n\n    return (\n        <>\n            <Layout>\n                <PageHeader\n                    className=\"site-page-header site-layout-background\"\n                    title=\"Document Browser\"\n                />\n                <div data-testid=\"table-component\">\n                    <Layout>\n                        <Layout.Content className=\"site-layout-background\">\n                            <Form form={form} layout='inline'>\n                                <Form.Item name=\"name\" label=\"Document Name\">\n                                    <Input placeholder=\"New Document\" />\n                                </Form.Item>\n                                <Form.Item>\n                                    <Button onClick={handleAdd} type=\"primary\" style={{ marginBottom: 16 }}>\n                                        Add a Document\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </Layout.Content>\n                    </Layout>\n                    <Layout>\n                        <Layout.Content className=\"site-layout-background\">\n                            <Table\n                                expandable={{ expandedRowRender: (record: any) => <p>{record.content}</p> }}\n                                showHeader={true}\n                                rowSelection={rowSelection}\n                                columns={columns}\n                                dataSource={filteredDocuments}\n                                title={tableTitle}\n                                pagination={tablePagination}\n                            />\n                        </Layout.Content>\n                    </Layout>\n                </div>\n            </Layout>\n        </>\n    );\n}\n","import { Layout } from \"antd\";\nimport { FC, useEffect, useState } from \"react\";\nimport { Sidebar } from \"./Sidebar\";\nimport { DocumentTable } from \"./DocumentTable\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { Moment } from 'moment';\nimport { RangeValue } from 'rc-picker/lib/interface';\n\nexport interface Props {\n    // No props\n}\n\n/**\n * @name DocumentDashboard Function Component extends {@link FC}\n * @summary Function component that will display a {@link DocumentTable} and a {@link Layout.Sider} component to filter the table.\n *\n * @param props {@link Props} to include. No props.\n *\n * @returns Fragment {@link React.Fragment} containing the composition of elements to display the {@link DocumentTable} and the {@link Sidebar} component.\n */\nexport const DocumentDashboard: FC<Props> = () => {\n    const [dateFilter, setDateFilter] = useState<string>('');\n    const [addressFilter, setAddressFilter] = useState<string>('');\n    const [statusFilter, setStatusFilter] = useState<string[]>([]);\n    const [groupFilter, setGroupFilter] = useState<string>('');\n    const [dateRangeFilter, setDateRangeFilter] = useState<string[]>([]);\n    const [checkboxGroupStatus, setCheckBoxGroupStatus] = useState<CheckboxValueType[]>([]);\n\n    /**\n     * @name clearFilters\n     * @summary Helper function to reset the filters of a given column name.\n     * @param column name.\n     */\n    const clearFilters = (column: string) => {\n        switch (column) {\n            case 'date':\n                setDateFilter('');\n                break;\n            case 'address':\n                setAddressFilter('');\n                break;\n            case 'status':\n                setStatusFilter([]);\n                break;\n            case 'group':\n                setGroupFilter('');\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * @name handleStatusFilter\n     * @summary Helper function to handle the onChange event on the status filter.\n     * @param options checked values.\n     */\n    const handleStatusFilter = (options: CheckboxValueType[]) => {\n        setCheckBoxGroupStatus(options);\n    };\n\n    /**\n     * @name handleDateFilter\n     * @summary Helper function to handle the onChange event on the date filter.\n     * @param date string representation.\n     */\n    const handleDateFilter = (date: string) => {\n        setDateFilter(date);\n    }\n\n    /**\n     * @name handleAddressFilter\n     * @summary Helper function to handle the onChange event on the address filter.\n     * @param address value.\n     */\n    const handleAddressFilter = (address: string) => {\n        setAddressFilter(address);\n    };\n\n    /**\n     * @name handleGroupFilter\n     * @summary Helper function to handle the onChange event on the group filter.\n     * @param group selected option.\n     */\n    const handleGroupFilter = (group: string) => {\n        setGroupFilter(group);\n    };\n\n    /**\n     * @name handleDateRangeFilter\n     * @summary Helper function to handle the onChange event on the range date filter.\n     * @param values date type parameter. Not used.\n     * @param formatString array of formatted dates, used to parse the date range.\n     */\n    const handleDateRangeFilter = (values: RangeValue<Moment>, formatString: [string, string]) => {\n        setDateRangeFilter(formatString);\n    }\n\n    // Effect to handle the changes on the state filter list and prepare the state for the components.\n    useEffect(() => {\n        let states: string[] = [];\n        checkboxGroupStatus.forEach((cs) => { states.push(cs.toString()) });\n        setStatusFilter(states);\n    }, [checkboxGroupStatus]);\n\n    return (\n        <>\n            <Layout>\n                <Sidebar\n                    dateFilter={dateFilter}\n                    addressFilter={addressFilter}\n                    statusFilter={statusFilter}\n                    groupFilter={groupFilter}\n                    handleDateFilter={handleDateFilter}\n                    handleAddressFilter={handleAddressFilter}\n                    handleStatusFilter={handleStatusFilter}\n                    handleDateRangeFilter={handleDateRangeFilter}\n                    handleGroupFilter={handleGroupFilter}\n                />\n                <Layout.Content className=\"site-layout-background\">\n                    <DocumentTable\n                        dateFilter={dateFilter}\n                        addressFilter={addressFilter}\n                        statusFilter={statusFilter}\n                        groupFilter={groupFilter}\n                        dateRangeFilter={dateRangeFilter}\n                        resetFilters={clearFilters}\n                    />\n                </Layout.Content>\n            </Layout>\n        </>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Button, Layout } from 'antd';\nimport logo from '../logo.svg';\nimport { FC } from 'react';\n\nexport const HomeContainer: FC = () => {\n  return (\n    <>\n      <Layout>\n        <Layout.Content>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.tsx</code> and save to reload.\n          </p>\n          <Button\n            type=\"primary\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\">Learn React</Button>\n        </Layout.Content>\n      </Layout>\n    </>\n  );\n}","import { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { DocumentDashboard } from \"./dashboard/DocumentDashboard\";\nimport { HomeContainer } from \"./HomeContainer\";\n\n/**\n * Routes class to manage rendering of different sections of the app.\n *\n * @summary Contains currently 2 routes to '/' and '/documents', where '/' corresponds to the homepage and '/documents' to the document browser.\n*/\nexport class Routes extends Component {\n\n  render() {\n    return (\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={() => { return (<HomeContainer />) }}\n        />\n\n        <Route\n          exact\n          path=\"/documents\"\n          render={(props) => { return (<DocumentDashboard {...props} {...this.props} />) }}\n        />\n      </Switch>\n    );\n  }\n};\n","import { Component } from 'react';\nimport { Layout } from 'antd';\nimport { Router } from \"react-router-dom\";\nimport { Header } from './components/Header';\nimport { createBrowserHistory } from 'history';\nimport './App.css';\nimport { BreadCrumb } from './components/breadcrumb/BreadCrumb';\nimport { Routes } from './components/Routes';\n\ntype Props = {\n// No props\n};\n\ntype State = {\n  selectedMenuEntry: string;\n};\n\n/**\n * Main Component Class\n *\n * @extends {React.Component} {@link Component}\n * @summary Renders the application example to display a navbar with 3 pages. Includes the document browser.\n * @property {any} history - BrowserHistory {@link createBrowserHistory} holds the visited pathnames.\n *\n * @author Juan Manuel Rodríguez\n *\n*/\nclass App extends Component<Props, State> {\n  // History for Router and links - type is any because type History is not generic\n  history: any;\n\n  state: State = {\n    // Active navbar entry\n    selectedMenuEntry: window.location.pathname.split(\"/\").pop() || ''\n  }\n\n  constructor(props: any) {\n    super(props);\n    // Initialize history\n    this.history = createBrowserHistory();\n  }\n\n  setSelectedMenuEntry = (value: string) => {\n    this.setState(() => ({ selectedMenuEntry: value }));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router history={this.history}>\n          <Layout>\n            <Header selectedEntry={this.state.selectedMenuEntry} setSelectedEntry={this.setSelectedMenuEntry} />\n            <Layout.Content style={{ padding: '0 50px' }}>\n              <BreadCrumb selectedEntry={this.state.selectedMenuEntry} setSelectedEntry={this.setSelectedMenuEntry} />\n              <Routes {...this.props} />\n            </Layout.Content>\n          </Layout>\n        </Router>\n      </div>)\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}